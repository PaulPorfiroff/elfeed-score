#+TITLE: elfeed-score
#+DESCRIPTION: Gnus-style scoring for Elfeed
#+AUTHOR: Michael Herstine
#+EMAIL: sp1ff@pobox.com
#+DATE: <2021-02-25 Thu 08:03>
#+AUTODATE: t
#+OPTIONS: toc:nil org-md-headline-style:setext *:t ^:nil

[[https://melpa.org/#/elfeed-score][file:https://melpa.org/packages/elfeed-score-badge.svg]]
[[https://stable.melpa.org/#/elfeed-score][file:https://stable.melpa.org/packages/elfeed-score-badge.svg]]
[[https://github.com/sp1ff/elfeed-score/workflows/melpazoid/badge.svg][file:https://github.com/sp1ff/elfeed-score/workflows/melpazoid/badge.svg]]


* Ann: elfeed-score 0.7 pre-releases

Hello all-- in order to support some new features I'd like to add, I've started re-factoring elfeed-score from one Emacs Lisp file (over 2K LoC in size) into several. I've also made a significant change to the serialization format. Upgrading should be transparent, but out of an abundance of caution I'm doing the work on branch (=0.7=) and I've started putting up pre-releases made from that branch (the latest may be found [[https://github.com/sp1ff/elfeed-score/releases/tag/0.7.3][here]]). If anyone would like to try 'em out & let me know how it worked, I'd appreciate it. Also, apologies to anyone getting elfeed-score from MELPA Stable: I didn't realize that it picked up tags on *any* branch (as opposed to just =master=): as a result, I find myself in the odd position of hosting the latest builds on MELPA Stable, and the known-good, stable code on MELPA.

At this point, I've been letting the latest =0.7= code "bake" in my production Emacs instance; with no major issues having cropped up in the past few days I'll be mergint into =master= & releasing soon.
* Introduction

[[https://github.com/sp1ff/elfeed-score][elfeed-score]] brings Gnus-style [[https://www.gnu.org/software/emacs/manual/html_node/gnus/Scoring.html#Scoring][scoring]] to [[https://github.com/skeeto/elfeed][Elfeed]].

[[https://github.com/skeeto/elfeed][Elfeed]] is an extensible web feed reader for Emacs. By default, it will display entries in reverse chronological order. This package defines a bit of metadata for each of your feed entries: a "score". A score is an integer (negative or positive), and higher scores denote entries of greater interest to you. This package also (optionally) installs a new sort function, so that Elfeed will display entries with higher scores before entries with lower scores (entries with the same scores will still be sorted in reverse chronological order). It also provides an entry display function for the elfeed search buffer that displays each entry's score, should you choose to install it.

While you can manually assign a score to an entry, you will likely find it more convenient to create rules for scoring that will be automatically applied to each new entry every time you update Elfeed. You can score against title, feed, content & authors by defining strings that will be matched against those attributes by substring, regexp or whole-word match. You can score against the feed (on the basis of title, URL, or feed author). You can also score against the presence or absence of tags. Rules can be scoped by Elfeed entry tags or by their feed, so that a rule will only be applied to a subset of your entries. Each rule defines an integral value, and the rules are applied in order of definition. The new entry's score begins at zero, and is adjusted by the value defined by each matching scoring rule.

For instance, here's a subset of my scoring file at the moment:

#+BEGIN_SRC elisp
  ;;; Elfeed score file                                     -*- lisp -*-
  (("title"
    (:text "OPEN THREAD" :value -1000 :type S :date 1576681345.4086394)
    (:text "raymond c\\(hen\\)?" :value 250 :type r :date 1576808786.1558545) :tags (t .(@dev)))
   ("content"
    (:text "type erasure" :value 500 :type s :date 1576808786.043517))
   ("title-or-content"
    (:text "california" 150 100 :type s :date 1576808786.4068587)
    (:text "china" 150 100 :type w :date 1576808786.1848788))
   ("feed"
    (:text "Essays in Idleness" :value 250 :type S :attr t :date 1576808786.1956885)
    (:text "Irreal" :value 250 :type S :attr t :date 1576808786.1765869)
    (:text "Julia Evans" :value 100 :type :type s :attr t :date 1576808786.4092398)
    (:text "National Weather Service" :value 400 :type S :attr t :date 1576808786.1117532)
    (:text "emacs-news â€“ sacha chua" :value 350 :type S :attr t :date 1576808785.3807983))
   ("authors"
     (:text "Jim Geraghty" :value 500 :type s :date 1611757856.1711636 :hits 150))
   ("tag"
    (:tags (t . reddit-question)
     :value 750))
   (mark -2500))
#+END_SRC

Like Gnus scoring, this may look like Lisp code, but it is not directly eval'd. It will be read by the Lisp reader, so it must at least be a valid Lisp s-expression. 

This README introduces the package and describes the various ways to install it. Detailed user documentation (including full details on the score file format) is distributed in Texinfo format with the package and is also available in  HTML format [[https://www.unwoundstack.com/doc/elfeed-score/curr][here]].
* Prerequisites

This package requires Emacs 26.1, and was developed against [[https://github.com/skeeto/elfeed][Elfeed]] 3.3.0, which itself requires cURL.
* Installing

** MELPA

The easiest way to install elfeed-score is [[https://github.com/melpa/melpa][MELPA]]; assuming you've got MELPA in your =package-archives=, just say:

#+BEGIN_SRC elisp
  (use-package elfeed-score
    :ensure t
    :config
    (progn
      (elfeed-score-enable)
      (define-key elfeed-search-mode-map "=" elfeed-score-map)))
#+END_SRC

** Download the Package

You can also download the Emacs package file on the GitHub releases [[https://github.com/sp1ff/elfeed-score/releases][page]] or from my personal [[https://www.unwoundstack/distros.html][page]]. Then say:

#+BEGIN_SRC elisp
(package-install-file "elfeed-score-0.7.3.tar")
#+END_SRC

** Autotools Source Distributions

You can also download Autotools source tarballs (again available either on the GitHub releases [[https://github.com/sp1ff/elfeed-score/releases][page]] or from my personal [[https://www.unwoundstack/distros.html][site]]). The =make= step passes the =--batch= flag when compiling, so if the [[https://github.com/skeeto/elfeed][elfeed]] files are not installed somewhere in Emacs' default load path (if, say, they're in =~/emacs.d/elpa=), you'll need to set =EMACSLOADPATH= to pick it up; for instance:

#+BEGIN_SRC bash
cd /tmp
curl -L --output elfeed-score-0.7.3.tar.gz https://github.com/sp1ff/elfeed-score/releases/download/0.7.3/elfeed-score-0.7.3.tar.gz
tar xvf elfeed-score-0.7.3.tar.gz && cd elfeed-score-0.7.3
export EMACSLOADPATH=$HOME/.emacs.d/elpa/elfeed-20200209.1942:$EMACSLOADPATH
./configure
make
sudo make install
#+END_SRC

Unless you already use =EMACSLOADPATH= as part of your usual invocation of Emacs, this isn't likely to work as written-- you'll need to work out exactly how to tell Emacs to pick-up the rest of its LISP files. On an old Ubuntu 18.04 system of mine, for instance, =EMACSLOADPATH=$HOME/.emacs.d/elpa/elfeed-20200209.1942:/usr/share/emacs/25.2/lisp= works.
*** Running the Unit Tests

The unit tests require some macros defined by the [[https://github.com/skeeto/elfeed][Elfeed]] test suite, which is not distributed with the MELPA package. Therefore, you'll need to clone the Elfeed git repo & develop against that:

#+BEGIN_SRC bash
cd /tmp
git clone https://github.com/skeeto/elfeed.git
curl -L --output=elfeed-score-0.7.3.tar.gz https://github.com/sp1ff/elfeed-score/releases/download/0.7.3/elfeed-score-0.7.3.tar.gz
tar xvf elfeed-score-0.7.3.tar.gz && cd elfeed-score-0.7.3
export EMACSLOADPATH=/tmp/elfeed-score-0.7.3:/tmp/elfeed:/tmp/elfeed/tests:$EMACSLOADPATH
./configure
make
make check
sudo make install
#+END_SRC

Again, unless you already use =EMACSLOADPATH=, you'll need to set =EMACSLOADPATH= appropriately to your system, something like =EMACSLOADPATH=/tmp/elfeed-score-0.7.3:/tmp/elfeed:/tmp/elfeed/tests:/usr/share/emacs/25.2/lisp=.

** Building From Source

Finally, you can of course just clone this repo & build there. I've started a [[https://github.com/sp1ff/elfeed-score/wiki][wiki]], whose intended audience are people looking to hack on elfeed-score, that includes build instructions.
* Status and Roadmap

I've been using [[https://github.com/sp1ff/elfeed-score][elfeed-score]] day in & day out for my RSS reading for over a year now. I wrote a post on how [[https://github.com/sp1ff/elfeed-score][elfeed-score]] works, along with the process of submitting code to MELPA, [[https://www.unwoundstack.com/blog/scoring-elfeed-entries.html][here]]. [[https://github.com/C-J-Cundy][Chris]] wrote a post on how he uses it to [[https://cundy.me/post/elfeed/][manage ArXiv RSS Feeds]]. 

The current version number (0.N) was chosen to suggest a preliminary release, but I'm thinking about calling this 1.0 soon. Preparatory to that, I've been re-factoring the code (it used to reside in a single file that had grown to over 2K LoC) and breaking up the documentation into a brief README (this file) a developer's wiki, and proper user documentation.

Before calling this "1.0" I'd also like to re-write the serialization logic to use something easier to read, such as property lists. As scoring rules have acquired more attributes, a flat list has become too confusing to read, maintain & hand-edit.

I plan next to introduce commands for adding rules interactively (e.g. while reading an entry, you could say "score this entry's author higher", or "add a rule matching titles against this text I've selected in the current entry").

Finally, I'd like to use elfeed-score to explore some ideas I have about learning the user's habits automatically based on their actions in elfeed (but without making them feel they're being stalked).

Bugs, comments, problems, PRs, feature requests &c welcome at [[mailto:sp1ff@pobox.com][sp1ff@pobox.com]] and in the [[https://github.com/sp1ff/elfeed-score/issues][issues]].
